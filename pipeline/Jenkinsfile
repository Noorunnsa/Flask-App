pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = "dockerHubCredentials"
    }
    stages {
        stage('Checkout main branch') {
            steps {
                git branch: 'main', url: 'https://github.com/Noorunnsa/Flask-App.git'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKERHUB_USERNAME', 
                    passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh "docker build -t ${DOCKERHUB_USERNAME}/flask-app:${BUILD_NUMBER} -f app/Dockerfile ."
                        sh "docker images"
                        sh "sleep 10"
                    }
                }
            }
        }

        stage('Login to DockerHub and Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKERHUB_USERNAME', 
                    passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh "echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin"
                        sh "docker push ${DOCKERHUB_USERNAME}/flask-app:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage('Initialize Terraform') {
            steps {
                dir('terraform') {
                    withAWS(credentials: 'aws-credentials') {
                    sh "terraform init"
                    }
                }
            }
        }

        stage('Update Container Image Tag in terraform.tfvars') {
            steps {
                dir('terraform') {
                    sh "sed -i 's|noorunnisa/flask-app:latest|noorunnisa/flask-app:${BUILD_NUMBER}|g' terraform.tfvars"
                    echo "Replaced image tag with noorunnisa/flask-app:${BUILD_NUMBER}"
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('terraform') {  
                     withAWS(credentials: 'aws-credentials') {
                        sh "terraform plan --var-file=terraform.tfvars"
                }
            }
        }
    }      

        stage('Manual Approval') {
            steps {
                input message: 'Approve Terraform Apply?', ok: 'Apply'
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('terraform') {
                     withAWS(credentials: 'aws-credentials') {
                    sh "terraform apply --var-file=terraform.tfvars -auto-approve"
                     }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
