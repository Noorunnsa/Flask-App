pipeline {
    agent any
    environment {
        // Define Docker Hub credentials ID stored in Jenkins credentials store
        DOCKERHUB_CREDENTIALS = "dockerHubCredentials"
    }
    stages {
      stage('Checkout main branch') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: 'origin/main']], userRemoteConfigs: [[url: 'https://github.com/Noorunnsa/Flask-App.git']]])
            }
        }
      stage('Build Docker Image') {
            steps {
                 script {
                    // Load Docker Hub credentials from Jenkins credentials store
                    withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKERHUB_USERNAME', 
passwordVariable: 'DOCKERHUB_PASSWORD')]) {
          sh "docker build -t ${DOCKERHUB_USERNAME}/flask-app:${BUILD_NUMBER} -f app/Dockerfile ."
          sh "docker images"
          sh "sleep 10"
            } }
        }
      stage('Login to DockerHub and Push Docker Image') {
            steps {
                script {
                    // Load Docker Hub credentials from Jenkins credentials store
                    withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKERHUB_USERNAME', 
passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        // Login to Docker Hub
                        sh "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}"
                        // Push Docker image
                        sh "docker push ${DOCKERHUB_USERNAME}/flask-app:${BUILD_NUMBER}"
                    }
                }
            }
        }
      stage('Initialize Terraform') {
          steps {
                dir('terraform') {
                    sh "terraform init"
                }
            }
        }
      stage('Update Container Image Tag in terraform.tfvars') {
            steps {
                dir('terraform') {
                    // Replace the image tag in terraform.tfvars file with the Jenkins build number
                    sh "sed -i 's|noorunnisa/flask-app:latest|noorunnisa/flask-app:${BUILD_NUMBER}|g' terraform.tfvars"
                    echo "Replaced image tag with noorunnisa/flask-app:${BUILD_NUMBER}"
                }
            }
        }

      stage('Terraform Plan') {
            steps {
                dir('terraform') {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding', 
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY', 
                        credentialsId: 'aws-credentials']]) {
                        sh "terraform plan --var-file=terraform.tfvars -auto-approve"
                    }
                }
            }
        }
      stage('Manual Approval') {
            steps {
                input message: 'Approve Terraform Apply?', ok: 'Apply'
            }
        }
        
      stage('Terraform Apply') {
            steps {
                dir('terraform') {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding', 
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY', 
                        credentialsId: 'aws-credentials']]) {
                        sh "terraform apply --var-file=terraform.tfvars -auto-approve"
                    }
                }
            }
        }
  post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed!"
         }
      }
    }
  }
} 
